import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# 📥 Carregar apenas o DataFrame de poderes
powers_df = pd.read_csv("C:/Users/muril/Downloads/archive/super_hero_powers.csv")

# 🧠 Extrair a matriz de poderes (binária: 0 ou 1)
X = powers_df.drop(columns=["hero_names"]).fillna(0)

# 📏 Padronizar os dados
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 🔻 Aplicar PCA
pca = PCA(n_components=2)
pca.fit(X_scaled)

# 📊 Criar DataFrame com as contribuições dos poderes nos componentes
components_df = pd.DataFrame(
    data=pca.components_,
    columns=X.columns,
    index=["PCA1", "PCA2"]
).T

# 🔝 Selecionar os 10 poderes mais influentes em cada componente
top_pca1 = components_df["PCA1"].abs().sort_values(ascending=False).head(10)
top_pca2 = components_df["PCA2"].abs().sort_values(ascending=False).head(10)

# 🎨 Plotar os gráficos
fig, axes = plt.subplots(1, 2, figsize=(14, 6))

top_pca1.plot(kind='barh', ax=axes[0], color='steelblue')
axes[0].set_title("Top 10 Poderes - PCA1")
axes[0].invert_yaxis()
axes[0].set_xlabel("Contribuição Absoluta")

top_pca2.plot(kind='barh', ax=axes[1], color='darkorange')
axes[1].set_title("Top 10 Poderes - PCA2")
axes[1].invert_yaxis()
axes[1].set_xlabel("Contribuição Absoluta")

# 👀 Mostrar gráfico
plt.tight_layout()
plt.show()
